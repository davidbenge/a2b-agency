# Brand/Agency Secret Security Rules

## CRITICAL: Secret Must Never Be Exposed

The `secret` field is a shared authentication credential between agency and brand. It must be protected at all times.

### ❌ NEVER expose secret in:

1. **API Responses** - Any endpoint that returns brand/agency data
2. **Frontend UI** - View mode, edit mode, or any display
3. **Update Requests** - Client should never send secret in params
4. **Browser DevTools** - Network tab, console, localStorage
5. **Logs** - Mask secret in logs (show last 4 chars only)

### ✅ ONLY use secret for:

1. **Generation** - `new-brand-registration` or `new-agency-registration` action (once)
2. **CloudEvent Delivery** - `registration.enabled` event payload (once)
3. **Authentication Headers** - `X-A2B-Brand-Secret` or `X-A2B-Agency-Secret` (every request)

## Implementation Patterns

### Backend Actions - Always Use toSafeJSON()

```typescript
// ✅ CORRECT - Use toSafeJSON() for API responses
return {
  statusCode: 200,
  body: {
    message: "Success",
    data: brand.toSafeJSON()  // Excludes secret
  }
};

// ❌ WRONG - Direct return exposes secret
return {
  statusCode: 200,
  body: {
    message: "Success",
    data: brand  // Includes secret - NEVER DO THIS
  }
};
```

### Backend Actions - Reject Secret from Update Params

```typescript
// ✅ CORRECT - Exclude secret from params
const { secret: _ignoredSecret, ...safeParams } = params;

const updatedBrand = BrandManager.createBrand({
  ...existingBrand.toJSON(),
  ...safeParams,  // Secret excluded
  secret: existingBrand.secret  // Use stored secret only
});

// ❌ WRONG - Accept all params including potential secret
const updatedBrand = BrandManager.createBrand({
  ...existingBrand.toJSON(),
  ...params  // Could include secret from client
});
```

### Frontend - Never Display or Send Secret

```tsx
// ❌ WRONG - Never display secret
<Text>Secret: {brand.secret}</Text>

// ✅ CORRECT - Document why it's not shown
{/* Secret is NEVER displayed for security */}

// ❌ WRONG - Never send secret in update
await api.updateBrand({ ...brand, secret: brand.secret });

// ✅ CORRECT - Exclude secret from update
const { secret, ...safeData } = brand;
await api.updateBrand(safeData);
```

### TypeScript Interfaces

```typescript
// For API responses - secret is optional/excluded
interface SafeBrand {
  brandId: string;
  name: string;
  endPointUrl: string;
  enabled: boolean;
  // secret is NOT included
}

// For internal use - secret is required
interface Brand extends SafeBrand {
  secret: string;
}
```

## Testing Checklist

Before committing any changes to brand/agency management:

- [ ] Verify `get-brand`/`get-agency` response excludes secret
- [ ] Verify `get-brands`/`get-agencies` response excludes secrets
- [ ] Verify `update-brand`/`update-agency` response excludes secret
- [ ] Verify `update-brand`/`update-agency` ignores secret in params
- [ ] Verify `new-brand-registration` response excludes secret
- [ ] Verify UI never displays secret
- [ ] Check Network tab - no secret in any response
- [ ] Check Network tab - no secret in any request
- [ ] Verify secret is included in `registration.enabled` event
- [ ] Verify secret is included in authentication headers

## Related Documentation

- `docs/cursor/SECRET_SECURITY_PATTERN.md` - Complete security pattern
- `docs/apis/new-brand-registration/README.md` - Registration API security
- `docs/cursor/RUNTIME_INFO_PATTERN.md` - Related runtime isolation pattern

## Quick Reference

**Secret Lifecycle**:
1. Generate (registration) → 2. Deliver (CloudEvent) → 3. Authenticate (headers)

**Golden Rule**:
> If you're returning data to the frontend or external API, use `toSafeJSON()`.
> If you're processing internal logic or events, use `toJSON()`.

